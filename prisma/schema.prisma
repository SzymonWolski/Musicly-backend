generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Uzytkownik {
  ID_uzytkownik Int         @id @default(autoincrement())
  email         String
  haslo         String
  nick          String
  isAdmin       Boolean     @default(false)
  
  // Pola dla obrazu profilowego
  profileImageFilename String?
  profileImagePath     String?
  profileImageMimetype String?
  profileImageSize     Int?
  
  Polubienia    Polubienia[]
  Playlisty     Playlista[]
  
  // Relacje dla funkcji znajomych
  WyslaneProsbyZnajomych    Znajomi[] @relation("wyslaneProsbyZnajomych")
  OtrzymaneProsbyZnajomych  Znajomi[] @relation("otrzymaneProsbyZnajomych")

  // Relacje dla wiadomości
  WyslaneWiadomosci         Wiadomosci[] @relation("wyslaneWiadomosci")
  OtrzymaneWiadomosci       Wiadomosci[] @relation("otrzymaneWiadomosci")
}

model Autorzy {
  ID_autora             Int     @id @default(autoincrement())
  imie                  String
  kryptonim_artystyczny String
  nazwisko              String
  Utwory                Utwor[]
  Albumy                Album[]
}

model Utwor {
  ID_utworu    Int              @id @default(autoincrement())
  data_wydania String
  ID_autora    Int
  nazwa_utworu String
  
  // Pola dla pliku audio
  filename     String?
  filepath     String?
  mimetype     String? 
  filesize     Int?
  
  // Pola dla obrazu utworu
  imageFilename String?
  imagePath     String?
  imageMimetype String?
  imageSize     Int?

  Autor        Autorzy          @relation(fields: [ID_autora], references: [ID_autora])
  Polubienia   Polubienia[]
  Numeracja    Numeracja_utworu?
  PlaylistaUtwor PlaylistaUtwor[]
}

model Album {
  ID_albumu     Int        @id @default(autoincrement())
  ID_autora     Int
  nazwa_albumu  String
  nr_kolejnosci Int

  Autor         Autorzy    @relation(fields: [ID_autora], references: [ID_autora])
}

model Polubienia {
  ID_piosenki    Int
  ID_uzytkownik  Int
  data_polubienia String

  Uzytkownik     Uzytkownik @relation(fields: [ID_uzytkownik], references: [ID_uzytkownik])
  Utwor          Utwor      @relation(fields: [ID_piosenki], references: [ID_utworu])

  @@id([ID_piosenki, ID_uzytkownik])
}

model Numeracja_utworu {
  ID_utworu     Int   @id
  nr_kolejnosci Int

  Utwor         Utwor @relation(fields: [ID_utworu], references: [ID_utworu])
}

model Playlista {
  ID_playlisty    Int    @id @default(autoincrement())
  ID_uzytkownik   Int
  nazwa_playlisty String
  
  // Pola dla obrazu playlisty
  imageFilename   String?
  imagePath       String?
  imageMimetype   String?
  imageSize       Int?

  Uzytkownik      Uzytkownik @relation(fields: [ID_uzytkownik], references: [ID_uzytkownik])
  Utwory          PlaylistaUtwor[]
}

model PlaylistaUtwor {
  ID_playlisty Int
  ID_utworu    Int
  kolejnosc    Int

  Playlista    Playlista @relation(fields: [ID_playlisty], references: [ID_playlisty])
  Utwor        Utwor     @relation(fields: [ID_utworu], references: [ID_utworu])

  @@id([ID_playlisty, ID_utworu])
}

model Znajomi {
  ID_znajomych    Int       @id @default(autoincrement())
  ID_uzytkownik1  Int       // Użytkownik, który wysłał zaproszenie
  ID_uzytkownik2  Int       // Użytkownik, który otrzymał zaproszenie
  status          String    @default("pending") // pending, accepted, rejected
  data_dodania    DateTime  @default(now())
  
  Uzytkownik1     Uzytkownik @relation("wyslaneProsbyZnajomych", fields: [ID_uzytkownik1], references: [ID_uzytkownik])
  Uzytkownik2     Uzytkownik @relation("otrzymaneProsbyZnajomych", fields: [ID_uzytkownik2], references: [ID_uzytkownik])
  
  @@unique([ID_uzytkownik1, ID_uzytkownik2])
}

model Wiadomosci {
  ID_wiadomosci   Int       @id @default(autoincrement())
  ID_nadawca      Int       // Użytkownik, który wysłał wiadomość
  ID_odbiorca     Int       // Użytkownik, który otrzymał wiadomość
  tresc           String    // Treść wiadomości
  data_wyslania   DateTime  @default(now())
  przeczytana     Boolean   @default(false)
  
  Nadawca         Uzytkownik @relation("wyslaneWiadomosci", fields: [ID_nadawca], references: [ID_uzytkownik])
  Odbiorca        Uzytkownik @relation("otrzymaneWiadomosci", fields: [ID_odbiorca], references: [ID_uzytkownik]) 

}

model UtworyLog {
  ID_log          Int       @id @default(autoincrement())
  nazwa_utworu    String?   // Nazwa utworu, której dotyczyła akcja
  akcja           String    // "dodano" lub "usunieto"
  data_akcji      DateTime  @default(now())
}